;==============================================
; KiddieOS - Monitor Library Routines
; Author: Francis
; Version 1.0.0
;==============================================

%IFNDEF __MONITOR_LIB__
%DEFINE __MONITOR_LIB__

;----------------------------------------------
; Main Strings
;______________________________________________
NameSystem db "KiddieOS", 0 ; System Name
;----------------------------------------------

;----------------------------------------------
; Monitor & Windows Configurations
;______________________________________________
Count       dw 0000h            ; Count

BackWidth   dw 0000h            ; Background Width
BackHeight  dw 0000h            ; Background Height
BackColor   db 46               ; Background Color
Pagination  db 0                ; Pagination
CursorX     db 15               ; Cursor X
CursorY     db 12               ; Cursor Y
State       db 0                ; State

;----------------------------------------------

;----------------------------------------------
; Routine Library
;______________________________________________
; Definir o modo de vídei e configura posição padrão
VGA.SetVideoMode:
    mov ah, 00h                 ; Set Video Mode
    mov al, 13h                 ; 320x200 pixels, 256 cores
    int 10h                     ; Call BIOS
    mov ax, 320                 ; Set Background Width
    mov word[BackWidth], ax     ; Save Background Width
    mov ax, 200                 ; Set Background Height
    mov word[BackHeight], ax    ; Save Background Height
    call DrawPixelConfig        ; Call DrawPixelConfig
ret

; Função de gravar pixels na tela
DrawPixelConfig:
    mov ah, 0Ch                 ; Set Pixel
    mov al, [BackColor]         ; Color (cor verde)
    mov cx, 0                   ; X
    mov dx, 0                   ; Y
ret

;Pinta o fundo da tela
DrawBackground:
    int 10h                     ; Call BIOS
    inc cx                      ; Incrementa X
    cmp cx, word[BackWidth]     ; Compara X com a largura
    jne DrawBackground          ; Se não for igual, pinta o fundo
    mov cx, 0                   ; Reseta X
    inc dx                      ; Incrementa Y
    cmp dx, word[BackHeight]    ; Compara Y com a altura
    jne DrawBackground          ; Se não for igual, pinta o fundo
    mov dx, 0                   ; Reseta Y
ret

; Exibe a string na tela
PrintString:
    mov ah, 09h                 ; Função 09h da interrupção 21h: Imprimir string
    mov bh, [Pagination]        ; Página de vídeo (0)
    ;mov bl, 30                  ; Esquema de cores (branco sobre azul)
    mov cx, 1                   ; Número de vezes que a string será impressa
    mov al, [si]                ; Move o primeiro byte da string para AL
    .print:
    int 10h                     ; Chama a interrupção 10h para imprimir o caractere em AL
    inc si                      ; Incrementa o índice da string
    call MoveCursor             ; Chama a sub-rotina MoveCursor para mover o cursor
    mov ah, 09h                 ; Função 09h da interrupção 21h: Imprimir string
    mov al, [si]                ; Move o próximo byte da string para AL
    cmp al, 0                   ; Compara AL com 0 (fim da string)    
    jne .print                  ; Se AL não for 0, continua imprimindo o próximo caractere        
ret

; Mover o cursor para o final da string
MoveCursor:
    mov ah, 02h                 ; Função 02h da interrupção 10h: Mover cursor
    mov bh, [Pagination]        ; Página de vídeo (0)
    inc dl                      ; Incrementa a coluna
    int 10h                     ; Chama a interrupção 10h para mover o cursor
ret

; Efeito para a mensagem inicial do sistema (logo)
EffectInit:
    mov bl, 44                  ; Cor de fundo
    start:
        mov dh, [CursorY]       ; Move o cursor para a posição Y
        mov dl, [CursorX]       ; Move o cursor para a posição X
        call MoveCursor         ; Chama a sub-rotina MoveCursor para mover o cursor
        mov si, NameSystem      ; Move o endereço da string para SI
        call PrintString        ; Chama a sub-rotina PrintString para imprimir a string
        pusha                   ; o comando pusha salva todos os registradores de propósito geral na pilha (junção de push+a de all)
        mov bl, [State]         ; Move o estado para BL
        cmp bl, 0               ; Compara BL com 0
        je Increment            ; Se BL for igual a 0, pula para Increment
        jmp Decrement           ; Pula para Decrement
    Increment:
        popa                    ; o comando popa restaura todos os registradores de propósito geral da pilha (junção de pop+a de all)
        inc bl                  ; Incrementa BL
        call Waiting            ; Chama a sub-rotina Waiting
        cmp bl, 50              ; Compara BL com 50
        jne start               ; Se BL for diferente de 50, pula para start
        pusha                   ; o comando pusha salva todos os registradores de propósito geral na pilha (junção de push+a de all)
        mov bl, 1               ; Move 1 para BL
        mov byte[State], bl     ; Move BL para State
        popa                    ; o comando popa restaura todos os registradores de propósito geral da pilha (junção de pop+a de all)
        jmp start               ; Pula para start
    Decrement:
        popa                    ; o comando popa restaura todos os registradores de propósito geral da pilha (junção de pop+a de all)        
        dec bl                  ; Decrementa BL
        call Waiting            ; Chama a sub-rotina Waiting
        cmp bl, 44              ; Compara BL com 44
        jne start               ; Se BL for diferente de 44, pula para start
        pusha                   ; o comando pusha salva todos os registradores de propósito geral na pilha (junção de push+a de all)
        mov bl, 0               ; Move 0 para BL
        mov byte[State], bl     ; Move BL para State
        mov bx, [Count]         ; Move o contador para BX
        inc bx                  ; Incrementa BX
        mov word[Count], bx     ; Move BX para Count
        cmp bx, 50              ; Compara BX com 5000 (o número 5000 possui 2bytes) na máquina virtual podemos usar 50 ao invés de 5000 porque a máquina virtual é mais lenta
        jne ReturnLoop          ; Se BX for diferente de 5000, pula para ReturnLoop
        jmp ReturnProg          ; Pula para ReturnProg
    ReturnLoop:
        popa                    ; o comando popa restaura todos os registradores de propósito geral da pilha (junção de pop+a de all)
        jmp start               ; Pula para start
    ReturnProg:
        popa                    ; o comando popa restaura todos os registradores de propósito geral da pilha (junção de pop+a de all)
    ret                         ; Retorna para o ponto de chamada
ret

; cria um efeito de espera contando até 50000
Waiting:
    pusha                       ; o comando pusha salva todos os registradores de propósito geral na pilha (junção de push+a de all)
    mov bx, 0                   ; Move 0 para BX
    time:
        inc bx                  ; Incrementa BX
        cmp bx, 500             ; Compara BX com 50000 podemos usar 500 ao invés de 50000 porque a máquina virtual é mais lenta
        jne time                ; Se BX for diferente de 50000, pula para time
        popa                    ; o comando popa restaura todos os registradores de propósito geral da pilha (junção de pop+a de all)
ret                         ; Retorna para o ponto de chamada
    
;----------------------------------------------
%ENDIF